// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleRpcClient is the client API for RoleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRpcClient interface {
	GetVerCode(ctx context.Context, in *GetVerCodeReq, opts ...grpc.CallOption) (*GetVerCodeResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
}

type roleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRpcClient(cc grpc.ClientConnInterface) RoleRpcClient {
	return &roleRpcClient{cc}
}

func (c *roleRpcClient) GetVerCode(ctx context.Context, in *GetVerCodeReq, opts ...grpc.CallOption) (*GetVerCodeResp, error) {
	out := new(GetVerCodeResp)
	err := c.cc.Invoke(ctx, "/pb.role_rpc/getVerCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.role_rpc/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/pb.role_rpc/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/pb.role_rpc/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleRpcClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	out := new(GenerateTokenResp)
	err := c.cc.Invoke(ctx, "/pb.role_rpc/generateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRpcServer is the server API for RoleRpc service.
// All implementations must embed UnimplementedRoleRpcServer
// for forward compatibility
type RoleRpcServer interface {
	GetVerCode(context.Context, *GetVerCodeReq) (*GetVerCodeResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error)
	mustEmbedUnimplementedRoleRpcServer()
}

// UnimplementedRoleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRpcServer struct {
}

func (UnimplementedRoleRpcServer) GetVerCode(context.Context, *GetVerCodeReq) (*GetVerCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerCode not implemented")
}
func (UnimplementedRoleRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRoleRpcServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRoleRpcServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedRoleRpcServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedRoleRpcServer) mustEmbedUnimplementedRoleRpcServer() {}

// UnsafeRoleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRpcServer will
// result in compilation errors.
type UnsafeRoleRpcServer interface {
	mustEmbedUnimplementedRoleRpcServer()
}

func RegisterRoleRpcServer(s grpc.ServiceRegistrar, srv RoleRpcServer) {
	s.RegisterService(&RoleRpc_ServiceDesc, srv)
}

func _RoleRpc_GetVerCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).GetVerCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.role_rpc/getVerCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).GetVerCode(ctx, req.(*GetVerCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.role_rpc/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.role_rpc/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.role_rpc/getUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleRpc_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRpcServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.role_rpc/generateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRpcServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRpc_ServiceDesc is the grpc.ServiceDesc for RoleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.role_rpc",
	HandlerType: (*RoleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getVerCode",
			Handler:    _RoleRpc_GetVerCode_Handler,
		},
		{
			MethodName: "login",
			Handler:    _RoleRpc_Login_Handler,
		},
		{
			MethodName: "register",
			Handler:    _RoleRpc_Register_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _RoleRpc_GetUserInfo_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _RoleRpc_GenerateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
